import java.awt.FileDialog;
import java.awt.Frame;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class CS4551_Said {
	static CS4551_Said globalObj = new CS4551_Said();

	static void start(){
		Scanner sc = new Scanner(System.in);


		while(true){
		System.out.println("-------------- Main Menu -------------------");
		System.out.println("1. Block-Based Motion Compensation"+
						   	"\n2. Removing Moving Objects."+
						   	"\n3. Quit ");
		int userChoice = sc.nextInt(); 

			switch(userChoice){
				case 1: blockBasedMotionCompensation();
					break;

				case 2: removingMovingObjects();
					break;

				case 3: 
				System.out.println("Application Terminated...");
				System.exit(0);
			}
		}
	}

	static void blockBasedMotionCompensation(){
		Scanner sc = new Scanner(System.in);
		
		
		Image targetImg = chooseImage();
		Image referenceImg = chooseImage();
		
		System.out.print("Choose the block size (8, 16, or 24): "); 
		int blockSize = sc.nextInt();
		System.out.print("Choose the search size (4, 8, 12, or 16):");
		int searchIndex = sc.nextInt();

		imageExtracting(targetImg, referenceImg, blockSize, searchIndex);
	}

	static void removingMovingObjects(){

	}
	
	/**
	 * 	This method will extract NxN pixels out of the reference image and save it to 
	 * 	ArrayList for later use
	 * 
	 * @param targetImg
	 * @param referenceImg
	 * @param n size of block user chose.
	 * @param p size of search we use to search for matching blocks. 
	 */
	static void imageExtracting(Image targetImg, Image referenceImg, int n, int p) {
		
		ArrayList<MiniImage> listOfMiniBlocks = findImageBlocks(targetImg,n);
		
		compareImages(listOfMiniBlocks, referenceImg, p, n); // imgName is the image we pass to the next image. 
	}
	
	
	static void compareImages(ArrayList<MiniImage> imageMiniBlockList, Image referenceImg, int p, int n) {
		
		int numberOfComparison = (2*p+1);
		
		//######### loop over the array of the target image blocks.
		for(int i = 0; i < imageMiniBlockList.size() ; i++) {

			ArrayList<MSD> listOfAllMSD = new ArrayList<MSD>();
			Image blockToCompare = imageMiniBlockList.get(i).getImg();   // block we want to compare
			
			// width and height of the original block
				int width = imageMiniBlockList.get(i).getWidth();       // using my class would give me the width position.   
				int height = imageMiniBlockList.get(i).getHeight();		// using my class would give me the height position.
			
				int newWidthStarts = width-p;
				int newHeightStarts = height-p;

			// loop the number of comparison for each block 
				//for(int j = 0 ; j < numberOfComparison; j++) {
					
					// keep the boundries. 
					while(newWidthStarts < 0) { newWidthStarts++; }
					while(newHeightStarts < 0 ) { newHeightStarts++; }
					int sum = 0;
					// now we compare the blocks.
					int[] rgbReference = new int[3];
					int[] rgb = new int[3];
					
					// the block width and height.
					int blockW = 0;
					int blockH = 0;

			for(int ww = 0 ; ww < p+p ; ww++)	{
				for( int hh = 0 ; hh < p; hh++ ) {
	
					if(newWidthStarts+n > referenceImg.getW() && newHeightStarts+n < referenceImg.getH()) {
						
							for(int w=newWidthStarts; w<newWidthStarts+n; w++) {
								for(int h=newHeightStarts; h<newHeightStarts+n; h++) {
	
									// compare the gray value of the blocks and find the smallest.
									referenceImg.getPixel(w, h, rgbReference);
									blockToCompare.getPixel(blockW, blockH++, rgb);  // rgb of the block
									
									int grayRGB = (int) Math.round(0.299 * rgb[0] + 0.587 * rgb[1] + 0.114 * rgb[2]);
									int grayRefreneceRGB = (int) Math.round(0.299 * rgbReference[0] + 0.587 * rgbReference[1] + 0.114 * rgbReference[2]);
									
									// MSD 
									sum += 	((Math.pow(2, (grayRGB-grayRefreneceRGB)))/n*n);
									
								}
								blockW++;
								blockH = 0;
							}
							
					} // if ends 
					
					blockW = 0;
					blockH = 0;
					MSD msdobject = globalObj.new MSD(newWidthStarts,newHeightStarts,sum);
					listOfAllMSD.add(msdobject);
					
					newHeightStarts++;
				}
					newWidthStarts++;
			}
					
				
		//	} // number of comparison ends 
			
				
			System.out.println(listOfAllMSD.size());
			System.out.println(width + " " + height + " #### ");
			for(int x = 0; x < listOfAllMSD.size(); x++) {
				System.out.println("( " + listOfAllMSD.get(x).getValue() + " " + listOfAllMSD.get(x).getWidth() + " " + listOfAllMSD.get(x).getHeight() + ")");
			}
		}
		
		
	}
	
	
	/** 
	 *  Extract NxN Blocks from the targetImg
	 * 
	 * @param targetImg
	 * @param n
	 * @return
	 */
	static ArrayList<MiniImage> findImageBlocks(Image targetImg, int n) {
		int width,height;
		int[] a = new int[3];
		ArrayList<MiniImage> listOfMiniBlocks = new ArrayList<MiniImage>();
		// use the G values 
		
		for(width=0; width<targetImg.getW(); width+=n) {
			for(height=0; height<targetImg.getH(); height+=n) {
				
				Image miniBlock = new Image(n,n);
				if(width+n < targetImg.getW() && height+n < targetImg.getH()) {
				int[] rgb = new int[3];
				int ii=0,jj=0;
				for(int i=width; i<width+n; i++) {
					for(int j=height; j<height+n; j++) {
						targetImg.getPixel(i, j, rgb);
						miniBlock.setPixel(ii, jj++, rgb);
					}
					ii++;
					jj=0;
				}
			}
				CS4551_Said motion = new CS4551_Said();
				// each MiniBlock has the width and height location saved with it. 
				MiniImage newImage = motion.new MiniImage(miniBlock,width,height);
				listOfMiniBlocks.add(newImage);
			}
		}
		
		return listOfMiniBlocks;
	}
	
	//msn class
	public class MSD {
	    private int width;
	    private int height; 
	    private int value;
	    
		public MSD(int width, int height, int value) {
			this.width = width;
			this.height = height;
			this.value = value;
		}
		
		public int getWidth() {
			return width;
		}
		public void setWidth(int width) {
			this.width = width;
		}
		public int getHeight() {
			return height;
		}
		public void setHeight(int height) {
			this.height = height;
		}
		public int getValue() {
			return value;
		}
		public void setValue(int value) {
			this.value = value;
		}
	    
	    
	}
	
		public class MiniImage {
			
			public Image img;
			public int width;
			public int height;
			
			public MiniImage(Image img, int w, int h) {
				this.img = img;
				this.width = w;
				this.height = h;
			}

			public Image getImg() {
				return img;
			}

			public void setImg(Image img) {
				this.img = img;
			}

			public int getWidth() {
				return width;
			}

			public void setWidth(int width) {
				this.width = width;
			}

			public int getHeight() {
				return height;
			}

			public void setHeight(int height) {
				this.height = height;
			}
			
		}
		
		
	/** 
	 * 	A method to make the user able to choose an image from project directory.
	 * 
	 * @return user choosen image
	 */
	static Image chooseImage() {

		FileDialog dialog = new FileDialog((Frame)null, "Select File to Open");
		dialog.setDirectory(System.getProperty("user.dir"));
		dialog.setMode(FileDialog.LOAD);
	    dialog.setVisible(true);
	    String file = dialog.getFile();
	    Image img = new Image(file);
		
		return img;
	}
	public static void main(String[] args){
		start();
	}
}